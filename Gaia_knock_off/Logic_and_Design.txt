Workflow in the Workflow folder

So 3 major Features:

1) On Road Routing
2) Off Road Routing
3) Satellite Tracking capabilities per location

On Road Routing Logic:

Take a set of co-ordinates and find possible routes in between them.

Exact logic:

1) On Road Routing Logic and Design:

Find all road combination by coding Roads as objects and make them into a
linked list to the destination.

Map the duration and distance, return the shortest distance using a Heap sorting algorithm
import heapify
heap = heapify(... list of distances)
return heap[0]
using heap[0] map to exact route

In practice to cut development time using GoogleMaps API to code new server facing pythonic API to generate
distances with 3 main information in mind

Routes directions, Route directions with duration and distance for each sub step, and Route directions with duration,
distance and geocode locations (defined by latitude, longitude: start, end) in order to feed into a webframe work like
django in order to manipulate data for user preference.

So user can specify the level of detail they would like and furthermore to allow Continous Integration and
Continous Development (CI/CD) throughout the duration of the project lifespan.

Code design:

As such the formal logic should be as follows:
Coded in onroad.py

Code design wise the Psuedo Algorithm should look like this:

Front end GUI ---> user clicks on on-road direction --> enters user information i.e start address, end address and
google API key (uses google maps on the backend as data processing engine)-->
Rest API ---> User Information Entered into a SQL or Django ORM database --> passed onto backend onroad.py API as
object variables ---> Variables interact with Codebase (Methods) to generate User requested solution --> User requested
solution generated as list data ---> used to generate text file --> passed back to Django framework via ORM database -->
passed back to rest API ---> rest API generates JSON output ---> JSON output passed to GUI as a downloadable
file or output, per user specification.

Any furthermore modification of the psuedo algorithm, like modifying the codebase, Rest or server API's, or adding new
features for the user can be implemented using Git version control to continually develop, integrate and deploy the
product on a cloud or user specified platform to rapidly engineer value addition for the customer; replicating
Foundary OS and product solutions deployment via Apollo.



2) Off Road Routing Logic and Design:
Partially coded in offroad.py

First since Off road routing design can't be broken up into objects like roads since patches with no roads can't be
tracked as objects, lack of objects must define patch.

As such the formal logic should be as follows:

User information (start address and end destination address) ---> Rest API ---> use latitude, longitude of
starting and end destination addresses to find location ---> Generate pbf.osm file ---> Use latitude and longitude
information to box the boundaries for route analysis of the pbf.osm file ---> find list of roads and code them as
objects ---> find areas where these objects are not present, use on road API to find the quickest destinations to these
patches ---> generate a route through patch ---> store route in a data array or dictionary --> sort data array or
dictionary based on lowest distance --> compare it to on road route ---> return which ever one is lower.

Code design wise the Psuedo Algorithm should look like this:

Front end GUI ---> user clicks on off-road direction --> enters user information i.e start address, end address --->
google API key (uses google maps on the backend as data processing engine)-->
Rest API ---> User Information Entered into a SQL or Django ORM database --> passed onto backend offroad.py API as
object variables ---> Entered into off-road routing API --> off-road routing API passes variables by turning them into
object variables into data engine ---> produces location (place name) from address ---> produces pbf.osm file --->
uses latitude and longitude produced from front end starting and ending addresses to box pbf.osm data --->
map all roads and patches within the box ---> generate off road routes ---> compare to on road route ---> return the
shortest route ---> send it off back to the Rest API ---> give route information to the user in the form of JSON output
---> JSON output given to the Front end GUI

Exact coding API's to be used (as 1 week probably won't be enough to completely reverse engineer GAIA's
full functionalities, solo I do intend to finish up within a week or 2 of the interview date max)

API's that are to be used to cut down time on the backend development:

https://denikozub.github.io/Offroad-routing-engine/#installation
https://github.com/HTenkanen/pyrosm
*/Gaia_knock_off/onroad.py

More Detail in workflow presentation

3) Satellite Tracking Logic and Design:

So the satellite function checks if a location can be tracked or not from the GAIA demo:
https://vimeo.com/528986567/b7c83ae4ff

A location can be continually surveyed in real time if by my understanding the Field of Vision (FOV) of 3 or
more satellites overlap in that location. As such the logic should be as follows:

Formal Logic should be as follows:

User enters location information ---> Rest API ---> Backend database engine coded in Satellite_tracker.py recieves data -->
via ORM or SQL database ---> enters information as object variables into backend API ---> Generates satellite tracking
information ---> checks locations of satellites at time via TLE information ---> Generates FOV of each satellite at
each time --> Programs boundaries matching FOV boundaries within latitude and longitude--->
run a matching algorithm to see if the location ---> is within any of the FOV boundaries ---> if more than 3 return
trackable, else non-trackable location during that time.

Code design wise the Psuedo Algorithm should look like this:

User enters location into Front end GUI after clicking satellite tracking--->











